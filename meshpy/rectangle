#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Creates a mesh on a rectangle in the x-y-plane.
'''
import argparse
import meshio
import meshpy.triangle
import numpy as np
import time


def _main():
    # get the file name to be written to
    args = _parse_options()

    # dimensions of the rectangle
    l = [args.edgelength, args.edgelength]

    # create the mesh data structure
    print 'Create mesh for rectangle (dimensions: %g x %g)...' % (l[0], l[1]),
    start = time.time()
    boundary_points = [
            (-0.5*l[0], -0.5*l[1]),
            (0.5*l[0],  -0.5*l[1]),
            (0.5*l[0],   0.5*l[1]),
            (-0.5*l[0],  0.5*l[1])
            ]
    info = meshpy.triangle.MeshInfo()
    info.set_points(boundary_points)

    def _round_trip_connect(start, end):
        result = []
        for i in xrange(start, end):
            result.append((i, i+1))
        result.append((end, start))
        return result
    info.set_facets(_round_trip_connect(0, len(boundary_points)-1))

    def _needs_refinement(vertices, area):
        return bool(area > args.maxarea)

    meshpy_mesh = meshpy.triangle.build(
            info, refinement_func=_needs_refinement
            )
    elapsed = time.time() - start
    print 'done. (%gs)' % elapsed

    num_nodes = len(meshpy_mesh.points)
    print('\n%d nodes, %d elements\n' %
          (num_nodes, len(meshpy_mesh.elements))
          )

    # append column
    pts = np.array(meshpy_mesh.points)
    points = np.c_[pts[:, 0], pts[:, 1], np.zeros(num_nodes)]

    # write the mesh
    print 'Write mesh...',
    start = time.time()
    meshio.write(
            args.filename,
            points,
            {'triangle': np.array(meshpy_mesh.elements)}
            )
    elapsed = time.time()-start
    print 'done. (%gs)' % elapsed

    return


def _parse_options():
    '''Parse input options.'''
    parser = argparse.ArgumentParser(
            description='Construct a triangulation of a rectangle.'
            )

    parser.add_argument(
            'filename',
            metavar='FILE',
            type=str,
            help='file to be written to'
            )

    cc_radius = 5.0  # circumcircle radius
    lx = np.sqrt(2.0) * cc_radius
    parser.add_argument(
            '--edgelength', '-e',
            metavar='EDGELENGTH',
            type=float,
            default=lx,
            help='edge length of the square (default: %g)' % lx
            )

    parser.add_argument(
            '--maxarea', '-m',
            metavar='MAXAREA',
            dest='maxarea',
            nargs='?',
            type=float,
            default=0.1,
            help='meshpy triangulation with MAXAREA maximum triangle area'
            )

    return parser.parse_args()


if __name__ == '__main__':
    _main()
